<?php
/**
 * DocumentCheckRequestData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Irisnet\API\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Irisnet API
 *
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Irisnet\API\Client\Model;

use \ArrayAccess;
use \Irisnet\API\Client\ObjectSerializer;

/**
 * DocumentCheckRequestData Class Doc Comment
 *
 * @category Class
 * @package  Irisnet\API\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentCheckRequestData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentCheckRequestData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'callback' => '\Irisnet\API\Client\Model\Callback',
        'frontImage' => 'string',
        'backImage' => 'string',
        'selfieImage' => 'string',
        'minimumAcceptedAge' => 'int',
        'documentType' => 'string',
        'documentCountry' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'callback' => null,
        'frontImage' => null,
        'backImage' => null,
        'selfieImage' => null,
        'minimumAcceptedAge' => 'int32',
        'documentType' => null,
        'documentCountry' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'callback' => false,
        'frontImage' => false,
        'backImage' => false,
        'selfieImage' => false,
        'minimumAcceptedAge' => false,
        'documentType' => false,
        'documentCountry' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'callback' => 'callback',
        'frontImage' => 'frontImage',
        'backImage' => 'backImage',
        'selfieImage' => 'selfieImage',
        'minimumAcceptedAge' => 'minimumAcceptedAge',
        'documentType' => 'documentType',
        'documentCountry' => 'documentCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'callback' => 'setCallback',
        'frontImage' => 'setFrontImage',
        'backImage' => 'setBackImage',
        'selfieImage' => 'setSelfieImage',
        'minimumAcceptedAge' => 'setMinimumAcceptedAge',
        'documentType' => 'setDocumentType',
        'documentCountry' => 'setDocumentCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'callback' => 'getCallback',
        'frontImage' => 'getFrontImage',
        'backImage' => 'getBackImage',
        'selfieImage' => 'getSelfieImage',
        'minimumAcceptedAge' => 'getMinimumAcceptedAge',
        'documentType' => 'getDocumentType',
        'documentCountry' => 'getDocumentCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_TYPE_PASSPORT = 'passport';
    public const DOCUMENT_TYPE_DRIVING_LICENSE = 'driving_license';
    public const DOCUMENT_TYPE_NATIONAL_IDENTITY_CARD = 'national_identity_card';
    public const DOCUMENT_TYPE_RESIDENCE_PERMIT = 'residence_permit';
    public const DOCUMENT_TYPE_VISA = 'visa';
    public const DOCUMENT_TYPE_UNKNOWN = 'unknown';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_PASSPORT,
            self::DOCUMENT_TYPE_DRIVING_LICENSE,
            self::DOCUMENT_TYPE_NATIONAL_IDENTITY_CARD,
            self::DOCUMENT_TYPE_RESIDENCE_PERMIT,
            self::DOCUMENT_TYPE_VISA,
            self::DOCUMENT_TYPE_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('callback', $data ?? [], null);
        $this->setIfExists('frontImage', $data ?? [], null);
        $this->setIfExists('backImage', $data ?? [], null);
        $this->setIfExists('selfieImage', $data ?? [], null);
        $this->setIfExists('minimumAcceptedAge', $data ?? [], null);
        $this->setIfExists('documentType', $data ?? [], null);
        $this->setIfExists('documentCountry', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['callback'] === null) {
            $invalidProperties[] = "'callback' can't be null";
        }
        if ($this->container['frontImage'] === null) {
            $invalidProperties[] = "'frontImage' can't be null";
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['documentType']) && !in_array($this->container['documentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'documentType', must be one of '%s'",
                $this->container['documentType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets callback
     *
     * @return \Irisnet\API\Client\Model\Callback
     */
    public function getCallback()
    {
        return $this->container['callback'];
    }

    /**
     * Sets callback
     *
     * @param \Irisnet\API\Client\Model\Callback $callback callback
     *
     * @return self
     */
    public function setCallback($callback)
    {
        if (is_null($callback)) {
            throw new \InvalidArgumentException('non-nullable callback cannot be null');
        }
        $this->container['callback'] = $callback;

        return $this;
    }

    /**
     * Gets frontImage
     *
     * @return string
     */
    public function getFrontImage()
    {
        return $this->container['frontImage'];
    }

    /**
     * Sets frontImage
     *
     * @param string $frontImage The base64 encoded front image of the document to be checked in either jpg or png file format
     *
     * @return self
     */
    public function setFrontImage($frontImage)
    {
        if (is_null($frontImage)) {
            throw new \InvalidArgumentException('non-nullable frontImage cannot be null');
        }
        $this->container['frontImage'] = $frontImage;

        return $this;
    }

    /**
     * Gets backImage
     *
     * @return string|null
     */
    public function getBackImage()
    {
        return $this->container['backImage'];
    }

    /**
     * Sets backImage
     *
     * @param string|null $backImage The base64 encoded back image of the document to be checked in either jpg or png file format
     *
     * @return self
     */
    public function setBackImage($backImage)
    {
        if (is_null($backImage)) {
            throw new \InvalidArgumentException('non-nullable backImage cannot be null');
        }
        $this->container['backImage'] = $backImage;

        return $this;
    }

    /**
     * Gets selfieImage
     *
     * @return string|null
     */
    public function getSelfieImage()
    {
        return $this->container['selfieImage'];
    }

    /**
     * Sets selfieImage
     *
     * @param string|null $selfieImage The base64 encoded selfie image to be checked in either jpg or png file format
     *
     * @return self
     */
    public function setSelfieImage($selfieImage)
    {
        if (is_null($selfieImage)) {
            throw new \InvalidArgumentException('non-nullable selfieImage cannot be null');
        }
        $this->container['selfieImage'] = $selfieImage;

        return $this;
    }

    /**
     * Gets minimumAcceptedAge
     *
     * @return int|null
     */
    public function getMinimumAcceptedAge()
    {
        return $this->container['minimumAcceptedAge'];
    }

    /**
     * Sets minimumAcceptedAge
     *
     * @param int|null $minimumAcceptedAge The minimum accepted age in years for a DocumentCheck. Defaults to 18 if not provided
     *
     * @return self
     */
    public function setMinimumAcceptedAge($minimumAcceptedAge)
    {
        if (is_null($minimumAcceptedAge)) {
            throw new \InvalidArgumentException('non-nullable minimumAcceptedAge cannot be null');
        }
        $this->container['minimumAcceptedAge'] = $minimumAcceptedAge;

        return $this;
    }

    /**
     * Gets documentType
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['documentType'];
    }

    /**
     * Sets documentType
     *
     * @param string|null $documentType The type of the document
     *
     * @return self
     */
    public function setDocumentType($documentType)
    {
        if (is_null($documentType)) {
            throw new \InvalidArgumentException('non-nullable documentType cannot be null');
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($documentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'documentType', must be one of '%s'",
                    $documentType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['documentType'] = $documentType;

        return $this;
    }

    /**
     * Gets documentCountry
     *
     * @return string|null
     */
    public function getDocumentCountry()
    {
        return $this->container['documentCountry'];
    }

    /**
     * Sets documentCountry
     *
     * @param string|null $documentCountry The document's country in ISO 3166-1 alpha-2 format
     *
     * @return self
     */
    public function setDocumentCountry($documentCountry)
    {
        if (is_null($documentCountry)) {
            throw new \InvalidArgumentException('non-nullable documentCountry cannot be null');
        }
        $this->container['documentCountry'] = $documentCountry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



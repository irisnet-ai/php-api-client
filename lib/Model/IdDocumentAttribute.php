<?php
/**
 * IdDocumentAttribute
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Irisnet\API\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Irisnet API
 *
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Irisnet\API\Client\Model;

use \ArrayAccess;
use \Irisnet\API\Client\ObjectSerializer;

/**
 * IdDocumentAttribute Class Doc Comment
 *
 * @category Class
 * @description Attributes qualifying the _idDocument_ classification.
 * @package  Irisnet\API\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IdDocumentAttribute implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IdDocumentAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'documentType' => 'string',
        'documentNumber' => 'string',
        'isTwoSided' => 'bool',
        'issuingAuthority' => 'string',
        'issuingDate' => '\DateTime',
        'issuingCountry' => 'string',
        'expirationDate' => '\DateTime',
        'accessNumber' => 'string',
        'firstNames' => 'string[]',
        'lastNames' => 'string[]',
        'birthName' => 'string',
        'dateOfBirth' => '\DateTime',
        'placeOfBirth' => 'string',
        'nationality' => 'string',
        'gender' => 'string',
        'height' => 'string',
        'address' => 'string',
        'machineReadableZone' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'documentType' => null,
        'documentNumber' => null,
        'isTwoSided' => null,
        'issuingAuthority' => null,
        'issuingDate' => 'date',
        'issuingCountry' => null,
        'expirationDate' => 'date',
        'accessNumber' => null,
        'firstNames' => null,
        'lastNames' => null,
        'birthName' => null,
        'dateOfBirth' => 'date',
        'placeOfBirth' => null,
        'nationality' => null,
        'gender' => null,
        'height' => null,
        'address' => null,
        'machineReadableZone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'documentType' => false,
        'documentNumber' => false,
        'isTwoSided' => false,
        'issuingAuthority' => false,
        'issuingDate' => false,
        'issuingCountry' => false,
        'expirationDate' => false,
        'accessNumber' => false,
        'firstNames' => false,
        'lastNames' => false,
        'birthName' => false,
        'dateOfBirth' => false,
        'placeOfBirth' => false,
        'nationality' => false,
        'gender' => false,
        'height' => false,
        'address' => false,
        'machineReadableZone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'documentType' => 'documentType',
        'documentNumber' => 'documentNumber',
        'isTwoSided' => 'isTwoSided',
        'issuingAuthority' => 'issuingAuthority',
        'issuingDate' => 'issuingDate',
        'issuingCountry' => 'issuingCountry',
        'expirationDate' => 'expirationDate',
        'accessNumber' => 'accessNumber',
        'firstNames' => 'firstNames',
        'lastNames' => 'lastNames',
        'birthName' => 'birthName',
        'dateOfBirth' => 'dateOfBirth',
        'placeOfBirth' => 'placeOfBirth',
        'nationality' => 'nationality',
        'gender' => 'gender',
        'height' => 'height',
        'address' => 'address',
        'machineReadableZone' => 'machineReadableZone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'documentType' => 'setDocumentType',
        'documentNumber' => 'setDocumentNumber',
        'isTwoSided' => 'setIsTwoSided',
        'issuingAuthority' => 'setIssuingAuthority',
        'issuingDate' => 'setIssuingDate',
        'issuingCountry' => 'setIssuingCountry',
        'expirationDate' => 'setExpirationDate',
        'accessNumber' => 'setAccessNumber',
        'firstNames' => 'setFirstNames',
        'lastNames' => 'setLastNames',
        'birthName' => 'setBirthName',
        'dateOfBirth' => 'setDateOfBirth',
        'placeOfBirth' => 'setPlaceOfBirth',
        'nationality' => 'setNationality',
        'gender' => 'setGender',
        'height' => 'setHeight',
        'address' => 'setAddress',
        'machineReadableZone' => 'setMachineReadableZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'documentType' => 'getDocumentType',
        'documentNumber' => 'getDocumentNumber',
        'isTwoSided' => 'getIsTwoSided',
        'issuingAuthority' => 'getIssuingAuthority',
        'issuingDate' => 'getIssuingDate',
        'issuingCountry' => 'getIssuingCountry',
        'expirationDate' => 'getExpirationDate',
        'accessNumber' => 'getAccessNumber',
        'firstNames' => 'getFirstNames',
        'lastNames' => 'getLastNames',
        'birthName' => 'getBirthName',
        'dateOfBirth' => 'getDateOfBirth',
        'placeOfBirth' => 'getPlaceOfBirth',
        'nationality' => 'getNationality',
        'gender' => 'getGender',
        'height' => 'getHeight',
        'address' => 'getAddress',
        'machineReadableZone' => 'getMachineReadableZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_TYPE_PASSPORT = 'passport';
    public const DOCUMENT_TYPE_DRIVING_LICENSE = 'driving_license';
    public const DOCUMENT_TYPE_NATIONAL_IDENTITY_CARD = 'national_identity_card';
    public const DOCUMENT_TYPE_RESIDENCE_PERMIT = 'residence_permit';
    public const DOCUMENT_TYPE_VISA = 'visa';
    public const DOCUMENT_TYPE_UNKNOWN = 'unknown';
    public const GENDER_MALE = 'male';
    public const GENDER_FEMALE = 'female';
    public const GENDER_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_PASSPORT,
            self::DOCUMENT_TYPE_DRIVING_LICENSE,
            self::DOCUMENT_TYPE_NATIONAL_IDENTITY_CARD,
            self::DOCUMENT_TYPE_RESIDENCE_PERMIT,
            self::DOCUMENT_TYPE_VISA,
            self::DOCUMENT_TYPE_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
            self::GENDER_FEMALE,
            self::GENDER_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('documentType', $data ?? [], null);
        $this->setIfExists('documentNumber', $data ?? [], null);
        $this->setIfExists('isTwoSided', $data ?? [], null);
        $this->setIfExists('issuingAuthority', $data ?? [], null);
        $this->setIfExists('issuingDate', $data ?? [], null);
        $this->setIfExists('issuingCountry', $data ?? [], null);
        $this->setIfExists('expirationDate', $data ?? [], null);
        $this->setIfExists('accessNumber', $data ?? [], null);
        $this->setIfExists('firstNames', $data ?? [], null);
        $this->setIfExists('lastNames', $data ?? [], null);
        $this->setIfExists('birthName', $data ?? [], null);
        $this->setIfExists('dateOfBirth', $data ?? [], null);
        $this->setIfExists('placeOfBirth', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('machineReadableZone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['documentType']) && !in_array($this->container['documentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'documentType', must be one of '%s'",
                $this->container['documentType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Used as a type discriminator for json to object conversion.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets documentType
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['documentType'];
    }

    /**
     * Sets documentType
     *
     * @param string|null $documentType The type of the document
     *
     * @return self
     */
    public function setDocumentType($documentType)
    {
        if (is_null($documentType)) {
            throw new \InvalidArgumentException('non-nullable documentType cannot be null');
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($documentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'documentType', must be one of '%s'",
                    $documentType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['documentType'] = $documentType;

        return $this;
    }

    /**
     * Gets documentNumber
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['documentNumber'];
    }

    /**
     * Sets documentNumber
     *
     * @param string|null $documentNumber The number of the document
     *
     * @return self
     */
    public function setDocumentNumber($documentNumber)
    {
        if (is_null($documentNumber)) {
            throw new \InvalidArgumentException('non-nullable documentNumber cannot be null');
        }
        $this->container['documentNumber'] = $documentNumber;

        return $this;
    }

    /**
     * Gets isTwoSided
     *
     * @return bool|null
     */
    public function getIsTwoSided()
    {
        return $this->container['isTwoSided'];
    }

    /**
     * Sets isTwoSided
     *
     * @param bool|null $isTwoSided Indicates whether the document is two-sided
     *
     * @return self
     */
    public function setIsTwoSided($isTwoSided)
    {
        if (is_null($isTwoSided)) {
            throw new \InvalidArgumentException('non-nullable isTwoSided cannot be null');
        }
        $this->container['isTwoSided'] = $isTwoSided;

        return $this;
    }

    /**
     * Gets issuingAuthority
     *
     * @return string|null
     */
    public function getIssuingAuthority()
    {
        return $this->container['issuingAuthority'];
    }

    /**
     * Sets issuingAuthority
     *
     * @param string|null $issuingAuthority The issuing authority
     *
     * @return self
     */
    public function setIssuingAuthority($issuingAuthority)
    {
        if (is_null($issuingAuthority)) {
            throw new \InvalidArgumentException('non-nullable issuingAuthority cannot be null');
        }
        $this->container['issuingAuthority'] = $issuingAuthority;

        return $this;
    }

    /**
     * Gets issuingDate
     *
     * @return \DateTime|null
     */
    public function getIssuingDate()
    {
        return $this->container['issuingDate'];
    }

    /**
     * Sets issuingDate
     *
     * @param \DateTime|null $issuingDate The issuing date
     *
     * @return self
     */
    public function setIssuingDate($issuingDate)
    {
        if (is_null($issuingDate)) {
            throw new \InvalidArgumentException('non-nullable issuingDate cannot be null');
        }
        $this->container['issuingDate'] = $issuingDate;

        return $this;
    }

    /**
     * Gets issuingCountry
     *
     * @return string|null
     */
    public function getIssuingCountry()
    {
        return $this->container['issuingCountry'];
    }

    /**
     * Sets issuingCountry
     *
     * @param string|null $issuingCountry The document's country in ISO 3166-1 alpha-2 format
     *
     * @return self
     */
    public function setIssuingCountry($issuingCountry)
    {
        if (is_null($issuingCountry)) {
            throw new \InvalidArgumentException('non-nullable issuingCountry cannot be null');
        }
        $this->container['issuingCountry'] = $issuingCountry;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param \DateTime|null $expirationDate The expiration date
     *
     * @return self
     */
    public function setExpirationDate($expirationDate)
    {
        if (is_null($expirationDate)) {
            throw new \InvalidArgumentException('non-nullable expirationDate cannot be null');
        }
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets accessNumber
     *
     * @return string|null
     */
    public function getAccessNumber()
    {
        return $this->container['accessNumber'];
    }

    /**
     * Sets accessNumber
     *
     * @param string|null $accessNumber The access number
     *
     * @return self
     */
    public function setAccessNumber($accessNumber)
    {
        if (is_null($accessNumber)) {
            throw new \InvalidArgumentException('non-nullable accessNumber cannot be null');
        }
        $this->container['accessNumber'] = $accessNumber;

        return $this;
    }

    /**
     * Gets firstNames
     *
     * @return string[]|null
     */
    public function getFirstNames()
    {
        return $this->container['firstNames'];
    }

    /**
     * Sets firstNames
     *
     * @param string[]|null $firstNames The document holder's first name(s)
     *
     * @return self
     */
    public function setFirstNames($firstNames)
    {
        if (is_null($firstNames)) {
            throw new \InvalidArgumentException('non-nullable firstNames cannot be null');
        }
        $this->container['firstNames'] = $firstNames;

        return $this;
    }

    /**
     * Gets lastNames
     *
     * @return string[]|null
     */
    public function getLastNames()
    {
        return $this->container['lastNames'];
    }

    /**
     * Sets lastNames
     *
     * @param string[]|null $lastNames The document holder's last name(s)
     *
     * @return self
     */
    public function setLastNames($lastNames)
    {
        if (is_null($lastNames)) {
            throw new \InvalidArgumentException('non-nullable lastNames cannot be null');
        }
        $this->container['lastNames'] = $lastNames;

        return $this;
    }

    /**
     * Gets birthName
     *
     * @return string|null
     */
    public function getBirthName()
    {
        return $this->container['birthName'];
    }

    /**
     * Sets birthName
     *
     * @param string|null $birthName The document holder's birth name
     *
     * @return self
     */
    public function setBirthName($birthName)
    {
        if (is_null($birthName)) {
            throw new \InvalidArgumentException('non-nullable birthName cannot be null');
        }
        $this->container['birthName'] = $birthName;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime|null $dateOfBirth The document holder's date of birth
     *
     * @return self
     */
    public function setDateOfBirth($dateOfBirth)
    {
        if (is_null($dateOfBirth)) {
            throw new \InvalidArgumentException('non-nullable dateOfBirth cannot be null');
        }
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets placeOfBirth
     *
     * @return string|null
     */
    public function getPlaceOfBirth()
    {
        return $this->container['placeOfBirth'];
    }

    /**
     * Sets placeOfBirth
     *
     * @param string|null $placeOfBirth The document holder's place of birth
     *
     * @return self
     */
    public function setPlaceOfBirth($placeOfBirth)
    {
        if (is_null($placeOfBirth)) {
            throw new \InvalidArgumentException('non-nullable placeOfBirth cannot be null');
        }
        $this->container['placeOfBirth'] = $placeOfBirth;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality The document holder's nationality in ISO 3166-1 alpha-2 format
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The document holder's gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string|null $height The document holder's height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address The document holder's address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets machineReadableZone
     *
     * @return string[]|null
     */
    public function getMachineReadableZone()
    {
        return $this->container['machineReadableZone'];
    }

    /**
     * Sets machineReadableZone
     *
     * @param string[]|null $machineReadableZone The document's machine readable zone (MRZ), at most 3 lines
     *
     * @return self
     */
    public function setMachineReadableZone($machineReadableZone)
    {
        if (is_null($machineReadableZone)) {
            throw new \InvalidArgumentException('non-nullable machineReadableZone cannot be null');
        }
        $this->container['machineReadableZone'] = $machineReadableZone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



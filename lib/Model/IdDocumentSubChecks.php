<?php
/**
 * IdDocumentSubChecks
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Irisnet\API\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Irisnet API
 *
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Irisnet\API\Client\Model;

use \ArrayAccess;
use \Irisnet\API\Client\ObjectSerializer;

/**
 * IdDocumentSubChecks Class Doc Comment
 *
 * @category Class
 * @description Contains information on idDocument sub-checks
 * @package  Irisnet\API\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IdDocumentSubChecks implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IdDocumentSubChecks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mrzChecksum' => 'string',
        'mrzFormat' => 'string',
        'mrzConsistency' => 'string',
        'expirationDate' => 'string',
        'securityElements' => 'string',
        'photoLocation' => 'string',
        'blacklistCheck' => 'string',
        'photocopyCheck' => 'string',
        'specimenCheck' => 'string',
        'documentModelIdentification' => 'string',
        'documentLivenessCheck' => 'string',
        'spoofedImageAnalysis' => 'string',
        'faceLivenessCheck' => 'string',
        'dataIntegrityCheck' => 'string',
        'dataConsistencyCheck' => 'string',
        'ageValidationCheck' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mrzChecksum' => null,
        'mrzFormat' => null,
        'mrzConsistency' => null,
        'expirationDate' => null,
        'securityElements' => null,
        'photoLocation' => null,
        'blacklistCheck' => null,
        'photocopyCheck' => null,
        'specimenCheck' => null,
        'documentModelIdentification' => null,
        'documentLivenessCheck' => null,
        'spoofedImageAnalysis' => null,
        'faceLivenessCheck' => null,
        'dataIntegrityCheck' => null,
        'dataConsistencyCheck' => null,
        'ageValidationCheck' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mrzChecksum' => false,
        'mrzFormat' => false,
        'mrzConsistency' => false,
        'expirationDate' => false,
        'securityElements' => false,
        'photoLocation' => false,
        'blacklistCheck' => false,
        'photocopyCheck' => false,
        'specimenCheck' => false,
        'documentModelIdentification' => false,
        'documentLivenessCheck' => false,
        'spoofedImageAnalysis' => false,
        'faceLivenessCheck' => false,
        'dataIntegrityCheck' => false,
        'dataConsistencyCheck' => false,
        'ageValidationCheck' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mrzChecksum' => 'mrzChecksum',
        'mrzFormat' => 'mrzFormat',
        'mrzConsistency' => 'mrzConsistency',
        'expirationDate' => 'expirationDate',
        'securityElements' => 'securityElements',
        'photoLocation' => 'photoLocation',
        'blacklistCheck' => 'blacklistCheck',
        'photocopyCheck' => 'photocopyCheck',
        'specimenCheck' => 'specimenCheck',
        'documentModelIdentification' => 'documentModelIdentification',
        'documentLivenessCheck' => 'documentLivenessCheck',
        'spoofedImageAnalysis' => 'spoofedImageAnalysis',
        'faceLivenessCheck' => 'faceLivenessCheck',
        'dataIntegrityCheck' => 'dataIntegrityCheck',
        'dataConsistencyCheck' => 'dataConsistencyCheck',
        'ageValidationCheck' => 'ageValidationCheck'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mrzChecksum' => 'setMrzChecksum',
        'mrzFormat' => 'setMrzFormat',
        'mrzConsistency' => 'setMrzConsistency',
        'expirationDate' => 'setExpirationDate',
        'securityElements' => 'setSecurityElements',
        'photoLocation' => 'setPhotoLocation',
        'blacklistCheck' => 'setBlacklistCheck',
        'photocopyCheck' => 'setPhotocopyCheck',
        'specimenCheck' => 'setSpecimenCheck',
        'documentModelIdentification' => 'setDocumentModelIdentification',
        'documentLivenessCheck' => 'setDocumentLivenessCheck',
        'spoofedImageAnalysis' => 'setSpoofedImageAnalysis',
        'faceLivenessCheck' => 'setFaceLivenessCheck',
        'dataIntegrityCheck' => 'setDataIntegrityCheck',
        'dataConsistencyCheck' => 'setDataConsistencyCheck',
        'ageValidationCheck' => 'setAgeValidationCheck'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mrzChecksum' => 'getMrzChecksum',
        'mrzFormat' => 'getMrzFormat',
        'mrzConsistency' => 'getMrzConsistency',
        'expirationDate' => 'getExpirationDate',
        'securityElements' => 'getSecurityElements',
        'photoLocation' => 'getPhotoLocation',
        'blacklistCheck' => 'getBlacklistCheck',
        'photocopyCheck' => 'getPhotocopyCheck',
        'specimenCheck' => 'getSpecimenCheck',
        'documentModelIdentification' => 'getDocumentModelIdentification',
        'documentLivenessCheck' => 'getDocumentLivenessCheck',
        'spoofedImageAnalysis' => 'getSpoofedImageAnalysis',
        'faceLivenessCheck' => 'getFaceLivenessCheck',
        'dataIntegrityCheck' => 'getDataIntegrityCheck',
        'dataConsistencyCheck' => 'getDataConsistencyCheck',
        'ageValidationCheck' => 'getAgeValidationCheck'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MRZ_CHECKSUM_PASSED = 'passed';
    public const MRZ_CHECKSUM_FAILED = 'failed';
    public const MRZ_CHECKSUM_NOT_PROCESSED = 'not_processed';
    public const MRZ_FORMAT_PASSED = 'passed';
    public const MRZ_FORMAT_FAILED = 'failed';
    public const MRZ_FORMAT_NOT_PROCESSED = 'not_processed';
    public const MRZ_CONSISTENCY_PASSED = 'passed';
    public const MRZ_CONSISTENCY_FAILED = 'failed';
    public const MRZ_CONSISTENCY_NOT_PROCESSED = 'not_processed';
    public const EXPIRATION_DATE_PASSED = 'passed';
    public const EXPIRATION_DATE_FAILED = 'failed';
    public const EXPIRATION_DATE_NOT_PROCESSED = 'not_processed';
    public const SECURITY_ELEMENTS_PASSED = 'passed';
    public const SECURITY_ELEMENTS_FAILED = 'failed';
    public const SECURITY_ELEMENTS_NOT_PROCESSED = 'not_processed';
    public const PHOTO_LOCATION_PASSED = 'passed';
    public const PHOTO_LOCATION_FAILED = 'failed';
    public const PHOTO_LOCATION_NOT_PROCESSED = 'not_processed';
    public const BLACKLIST_CHECK_PASSED = 'passed';
    public const BLACKLIST_CHECK_FAILED = 'failed';
    public const BLACKLIST_CHECK_NOT_PROCESSED = 'not_processed';
    public const PHOTOCOPY_CHECK_PASSED = 'passed';
    public const PHOTOCOPY_CHECK_FAILED = 'failed';
    public const PHOTOCOPY_CHECK_NOT_PROCESSED = 'not_processed';
    public const SPECIMEN_CHECK_PASSED = 'passed';
    public const SPECIMEN_CHECK_FAILED = 'failed';
    public const SPECIMEN_CHECK_NOT_PROCESSED = 'not_processed';
    public const DOCUMENT_MODEL_IDENTIFICATION_PASSED = 'passed';
    public const DOCUMENT_MODEL_IDENTIFICATION_FAILED = 'failed';
    public const DOCUMENT_MODEL_IDENTIFICATION_NOT_PROCESSED = 'not_processed';
    public const DOCUMENT_LIVENESS_CHECK_PASSED = 'passed';
    public const DOCUMENT_LIVENESS_CHECK_FAILED = 'failed';
    public const DOCUMENT_LIVENESS_CHECK_NOT_PROCESSED = 'not_processed';
    public const SPOOFED_IMAGE_ANALYSIS_PASSED = 'passed';
    public const SPOOFED_IMAGE_ANALYSIS_FAILED = 'failed';
    public const SPOOFED_IMAGE_ANALYSIS_NOT_PROCESSED = 'not_processed';
    public const FACE_LIVENESS_CHECK_PASSED = 'passed';
    public const FACE_LIVENESS_CHECK_FAILED = 'failed';
    public const FACE_LIVENESS_CHECK_NOT_PROCESSED = 'not_processed';
    public const DATA_INTEGRITY_CHECK_PASSED = 'passed';
    public const DATA_INTEGRITY_CHECK_FAILED = 'failed';
    public const DATA_INTEGRITY_CHECK_NOT_PROCESSED = 'not_processed';
    public const DATA_CONSISTENCY_CHECK_PASSED = 'passed';
    public const DATA_CONSISTENCY_CHECK_FAILED = 'failed';
    public const DATA_CONSISTENCY_CHECK_NOT_PROCESSED = 'not_processed';
    public const AGE_VALIDATION_CHECK_PASSED = 'passed';
    public const AGE_VALIDATION_CHECK_FAILED = 'failed';
    public const AGE_VALIDATION_CHECK_NOT_PROCESSED = 'not_processed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMrzChecksumAllowableValues()
    {
        return [
            self::MRZ_CHECKSUM_PASSED,
            self::MRZ_CHECKSUM_FAILED,
            self::MRZ_CHECKSUM_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMrzFormatAllowableValues()
    {
        return [
            self::MRZ_FORMAT_PASSED,
            self::MRZ_FORMAT_FAILED,
            self::MRZ_FORMAT_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMrzConsistencyAllowableValues()
    {
        return [
            self::MRZ_CONSISTENCY_PASSED,
            self::MRZ_CONSISTENCY_FAILED,
            self::MRZ_CONSISTENCY_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpirationDateAllowableValues()
    {
        return [
            self::EXPIRATION_DATE_PASSED,
            self::EXPIRATION_DATE_FAILED,
            self::EXPIRATION_DATE_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityElementsAllowableValues()
    {
        return [
            self::SECURITY_ELEMENTS_PASSED,
            self::SECURITY_ELEMENTS_FAILED,
            self::SECURITY_ELEMENTS_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhotoLocationAllowableValues()
    {
        return [
            self::PHOTO_LOCATION_PASSED,
            self::PHOTO_LOCATION_FAILED,
            self::PHOTO_LOCATION_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlacklistCheckAllowableValues()
    {
        return [
            self::BLACKLIST_CHECK_PASSED,
            self::BLACKLIST_CHECK_FAILED,
            self::BLACKLIST_CHECK_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhotocopyCheckAllowableValues()
    {
        return [
            self::PHOTOCOPY_CHECK_PASSED,
            self::PHOTOCOPY_CHECK_FAILED,
            self::PHOTOCOPY_CHECK_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecimenCheckAllowableValues()
    {
        return [
            self::SPECIMEN_CHECK_PASSED,
            self::SPECIMEN_CHECK_FAILED,
            self::SPECIMEN_CHECK_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentModelIdentificationAllowableValues()
    {
        return [
            self::DOCUMENT_MODEL_IDENTIFICATION_PASSED,
            self::DOCUMENT_MODEL_IDENTIFICATION_FAILED,
            self::DOCUMENT_MODEL_IDENTIFICATION_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentLivenessCheckAllowableValues()
    {
        return [
            self::DOCUMENT_LIVENESS_CHECK_PASSED,
            self::DOCUMENT_LIVENESS_CHECK_FAILED,
            self::DOCUMENT_LIVENESS_CHECK_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpoofedImageAnalysisAllowableValues()
    {
        return [
            self::SPOOFED_IMAGE_ANALYSIS_PASSED,
            self::SPOOFED_IMAGE_ANALYSIS_FAILED,
            self::SPOOFED_IMAGE_ANALYSIS_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFaceLivenessCheckAllowableValues()
    {
        return [
            self::FACE_LIVENESS_CHECK_PASSED,
            self::FACE_LIVENESS_CHECK_FAILED,
            self::FACE_LIVENESS_CHECK_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataIntegrityCheckAllowableValues()
    {
        return [
            self::DATA_INTEGRITY_CHECK_PASSED,
            self::DATA_INTEGRITY_CHECK_FAILED,
            self::DATA_INTEGRITY_CHECK_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataConsistencyCheckAllowableValues()
    {
        return [
            self::DATA_CONSISTENCY_CHECK_PASSED,
            self::DATA_CONSISTENCY_CHECK_FAILED,
            self::DATA_CONSISTENCY_CHECK_NOT_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgeValidationCheckAllowableValues()
    {
        return [
            self::AGE_VALIDATION_CHECK_PASSED,
            self::AGE_VALIDATION_CHECK_FAILED,
            self::AGE_VALIDATION_CHECK_NOT_PROCESSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mrzChecksum', $data ?? [], null);
        $this->setIfExists('mrzFormat', $data ?? [], null);
        $this->setIfExists('mrzConsistency', $data ?? [], null);
        $this->setIfExists('expirationDate', $data ?? [], null);
        $this->setIfExists('securityElements', $data ?? [], null);
        $this->setIfExists('photoLocation', $data ?? [], null);
        $this->setIfExists('blacklistCheck', $data ?? [], null);
        $this->setIfExists('photocopyCheck', $data ?? [], null);
        $this->setIfExists('specimenCheck', $data ?? [], null);
        $this->setIfExists('documentModelIdentification', $data ?? [], null);
        $this->setIfExists('documentLivenessCheck', $data ?? [], null);
        $this->setIfExists('spoofedImageAnalysis', $data ?? [], null);
        $this->setIfExists('faceLivenessCheck', $data ?? [], null);
        $this->setIfExists('dataIntegrityCheck', $data ?? [], null);
        $this->setIfExists('dataConsistencyCheck', $data ?? [], null);
        $this->setIfExists('ageValidationCheck', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMrzChecksumAllowableValues();
        if (!is_null($this->container['mrzChecksum']) && !in_array($this->container['mrzChecksum'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mrzChecksum', must be one of '%s'",
                $this->container['mrzChecksum'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMrzFormatAllowableValues();
        if (!is_null($this->container['mrzFormat']) && !in_array($this->container['mrzFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mrzFormat', must be one of '%s'",
                $this->container['mrzFormat'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMrzConsistencyAllowableValues();
        if (!is_null($this->container['mrzConsistency']) && !in_array($this->container['mrzConsistency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mrzConsistency', must be one of '%s'",
                $this->container['mrzConsistency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExpirationDateAllowableValues();
        if (!is_null($this->container['expirationDate']) && !in_array($this->container['expirationDate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expirationDate', must be one of '%s'",
                $this->container['expirationDate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityElementsAllowableValues();
        if (!is_null($this->container['securityElements']) && !in_array($this->container['securityElements'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'securityElements', must be one of '%s'",
                $this->container['securityElements'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhotoLocationAllowableValues();
        if (!is_null($this->container['photoLocation']) && !in_array($this->container['photoLocation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'photoLocation', must be one of '%s'",
                $this->container['photoLocation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlacklistCheckAllowableValues();
        if (!is_null($this->container['blacklistCheck']) && !in_array($this->container['blacklistCheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blacklistCheck', must be one of '%s'",
                $this->container['blacklistCheck'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhotocopyCheckAllowableValues();
        if (!is_null($this->container['photocopyCheck']) && !in_array($this->container['photocopyCheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'photocopyCheck', must be one of '%s'",
                $this->container['photocopyCheck'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpecimenCheckAllowableValues();
        if (!is_null($this->container['specimenCheck']) && !in_array($this->container['specimenCheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'specimenCheck', must be one of '%s'",
                $this->container['specimenCheck'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentModelIdentificationAllowableValues();
        if (!is_null($this->container['documentModelIdentification']) && !in_array($this->container['documentModelIdentification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'documentModelIdentification', must be one of '%s'",
                $this->container['documentModelIdentification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentLivenessCheckAllowableValues();
        if (!is_null($this->container['documentLivenessCheck']) && !in_array($this->container['documentLivenessCheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'documentLivenessCheck', must be one of '%s'",
                $this->container['documentLivenessCheck'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpoofedImageAnalysisAllowableValues();
        if (!is_null($this->container['spoofedImageAnalysis']) && !in_array($this->container['spoofedImageAnalysis'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'spoofedImageAnalysis', must be one of '%s'",
                $this->container['spoofedImageAnalysis'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFaceLivenessCheckAllowableValues();
        if (!is_null($this->container['faceLivenessCheck']) && !in_array($this->container['faceLivenessCheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'faceLivenessCheck', must be one of '%s'",
                $this->container['faceLivenessCheck'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDataIntegrityCheckAllowableValues();
        if (!is_null($this->container['dataIntegrityCheck']) && !in_array($this->container['dataIntegrityCheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dataIntegrityCheck', must be one of '%s'",
                $this->container['dataIntegrityCheck'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDataConsistencyCheckAllowableValues();
        if (!is_null($this->container['dataConsistencyCheck']) && !in_array($this->container['dataConsistencyCheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dataConsistencyCheck', must be one of '%s'",
                $this->container['dataConsistencyCheck'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAgeValidationCheckAllowableValues();
        if (!is_null($this->container['ageValidationCheck']) && !in_array($this->container['ageValidationCheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ageValidationCheck', must be one of '%s'",
                $this->container['ageValidationCheck'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mrzChecksum
     *
     * @return string|null
     */
    public function getMrzChecksum()
    {
        return $this->container['mrzChecksum'];
    }

    /**
     * Sets mrzChecksum
     *
     * @param string|null $mrzChecksum Indicates whether the MRZ checksum is correct
     *
     * @return self
     */
    public function setMrzChecksum($mrzChecksum)
    {
        if (is_null($mrzChecksum)) {
            throw new \InvalidArgumentException('non-nullable mrzChecksum cannot be null');
        }
        $allowedValues = $this->getMrzChecksumAllowableValues();
        if (!in_array($mrzChecksum, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mrzChecksum', must be one of '%s'",
                    $mrzChecksum,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mrzChecksum'] = $mrzChecksum;

        return $this;
    }

    /**
     * Gets mrzFormat
     *
     * @return string|null
     */
    public function getMrzFormat()
    {
        return $this->container['mrzFormat'];
    }

    /**
     * Sets mrzFormat
     *
     * @param string|null $mrzFormat Indicates whether the MRZ format is correct
     *
     * @return self
     */
    public function setMrzFormat($mrzFormat)
    {
        if (is_null($mrzFormat)) {
            throw new \InvalidArgumentException('non-nullable mrzFormat cannot be null');
        }
        $allowedValues = $this->getMrzFormatAllowableValues();
        if (!in_array($mrzFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mrzFormat', must be one of '%s'",
                    $mrzFormat,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mrzFormat'] = $mrzFormat;

        return $this;
    }

    /**
     * Gets mrzConsistency
     *
     * @return string|null
     */
    public function getMrzConsistency()
    {
        return $this->container['mrzConsistency'];
    }

    /**
     * Sets mrzConsistency
     *
     * @param string|null $mrzConsistency Indicates whether the MRZ is consistent with the document type
     *
     * @return self
     */
    public function setMrzConsistency($mrzConsistency)
    {
        if (is_null($mrzConsistency)) {
            throw new \InvalidArgumentException('non-nullable mrzConsistency cannot be null');
        }
        $allowedValues = $this->getMrzConsistencyAllowableValues();
        if (!in_array($mrzConsistency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mrzConsistency', must be one of '%s'",
                    $mrzConsistency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mrzConsistency'] = $mrzConsistency;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param string|null $expirationDate Indicates whether the expirationDate is valid
     *
     * @return self
     */
    public function setExpirationDate($expirationDate)
    {
        if (is_null($expirationDate)) {
            throw new \InvalidArgumentException('non-nullable expirationDate cannot be null');
        }
        $allowedValues = $this->getExpirationDateAllowableValues();
        if (!in_array($expirationDate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expirationDate', must be one of '%s'",
                    $expirationDate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets securityElements
     *
     * @return string|null
     */
    public function getSecurityElements()
    {
        return $this->container['securityElements'];
    }

    /**
     * Sets securityElements
     *
     * @param string|null $securityElements Indicates whether the document's security elements are valid
     *
     * @return self
     */
    public function setSecurityElements($securityElements)
    {
        if (is_null($securityElements)) {
            throw new \InvalidArgumentException('non-nullable securityElements cannot be null');
        }
        $allowedValues = $this->getSecurityElementsAllowableValues();
        if (!in_array($securityElements, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'securityElements', must be one of '%s'",
                    $securityElements,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['securityElements'] = $securityElements;

        return $this;
    }

    /**
     * Gets photoLocation
     *
     * @return string|null
     */
    public function getPhotoLocation()
    {
        return $this->container['photoLocation'];
    }

    /**
     * Sets photoLocation
     *
     * @param string|null $photoLocation Indicates whether the photo is in the correct location for a given document type
     *
     * @return self
     */
    public function setPhotoLocation($photoLocation)
    {
        if (is_null($photoLocation)) {
            throw new \InvalidArgumentException('non-nullable photoLocation cannot be null');
        }
        $allowedValues = $this->getPhotoLocationAllowableValues();
        if (!in_array($photoLocation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'photoLocation', must be one of '%s'",
                    $photoLocation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['photoLocation'] = $photoLocation;

        return $this;
    }

    /**
     * Gets blacklistCheck
     *
     * @return string|null
     */
    public function getBlacklistCheck()
    {
        return $this->container['blacklistCheck'];
    }

    /**
     * Sets blacklistCheck
     *
     * @param string|null $blacklistCheck Indicates whether a competent authority deny-listed the ID document
     *
     * @return self
     */
    public function setBlacklistCheck($blacklistCheck)
    {
        if (is_null($blacklistCheck)) {
            throw new \InvalidArgumentException('non-nullable blacklistCheck cannot be null');
        }
        $allowedValues = $this->getBlacklistCheckAllowableValues();
        if (!in_array($blacklistCheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blacklistCheck', must be one of '%s'",
                    $blacklistCheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blacklistCheck'] = $blacklistCheck;

        return $this;
    }

    /**
     * Gets photocopyCheck
     *
     * @return string|null
     */
    public function getPhotocopyCheck()
    {
        return $this->container['photocopyCheck'];
    }

    /**
     * Sets photocopyCheck
     *
     * @param string|null $photocopyCheck Indicates whether the document is a photocopy
     *
     * @return self
     */
    public function setPhotocopyCheck($photocopyCheck)
    {
        if (is_null($photocopyCheck)) {
            throw new \InvalidArgumentException('non-nullable photocopyCheck cannot be null');
        }
        $allowedValues = $this->getPhotocopyCheckAllowableValues();
        if (!in_array($photocopyCheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'photocopyCheck', must be one of '%s'",
                    $photocopyCheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['photocopyCheck'] = $photocopyCheck;

        return $this;
    }

    /**
     * Gets specimenCheck
     *
     * @return string|null
     */
    public function getSpecimenCheck()
    {
        return $this->container['specimenCheck'];
    }

    /**
     * Sets specimenCheck
     *
     * @param string|null $specimenCheck Indicates whether the document has been copied from the Internet
     *
     * @return self
     */
    public function setSpecimenCheck($specimenCheck)
    {
        if (is_null($specimenCheck)) {
            throw new \InvalidArgumentException('non-nullable specimenCheck cannot be null');
        }
        $allowedValues = $this->getSpecimenCheckAllowableValues();
        if (!in_array($specimenCheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'specimenCheck', must be one of '%s'",
                    $specimenCheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['specimenCheck'] = $specimenCheck;

        return $this;
    }

    /**
     * Gets documentModelIdentification
     *
     * @return string|null
     */
    public function getDocumentModelIdentification()
    {
        return $this->container['documentModelIdentification'];
    }

    /**
     * Sets documentModelIdentification
     *
     * @param string|null $documentModelIdentification Indicates whether the document model has been identified and whether or not the document conforms to official specifications
     *
     * @return self
     */
    public function setDocumentModelIdentification($documentModelIdentification)
    {
        if (is_null($documentModelIdentification)) {
            throw new \InvalidArgumentException('non-nullable documentModelIdentification cannot be null');
        }
        $allowedValues = $this->getDocumentModelIdentificationAllowableValues();
        if (!in_array($documentModelIdentification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'documentModelIdentification', must be one of '%s'",
                    $documentModelIdentification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['documentModelIdentification'] = $documentModelIdentification;

        return $this;
    }

    /**
     * Gets documentLivenessCheck
     *
     * @return string|null
     */
    public function getDocumentLivenessCheck()
    {
        return $this->container['documentLivenessCheck'];
    }

    /**
     * Sets documentLivenessCheck
     *
     * @param string|null $documentLivenessCheck Indicates if the document image is genuine and not a photo of an image or of a screen
     *
     * @return self
     */
    public function setDocumentLivenessCheck($documentLivenessCheck)
    {
        if (is_null($documentLivenessCheck)) {
            throw new \InvalidArgumentException('non-nullable documentLivenessCheck cannot be null');
        }
        $allowedValues = $this->getDocumentLivenessCheckAllowableValues();
        if (!in_array($documentLivenessCheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'documentLivenessCheck', must be one of '%s'",
                    $documentLivenessCheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['documentLivenessCheck'] = $documentLivenessCheck;

        return $this;
    }

    /**
     * Gets spoofedImageAnalysis
     *
     * @return string|null
     */
    public function getSpoofedImageAnalysis()
    {
        return $this->container['spoofedImageAnalysis'];
    }

    /**
     * Sets spoofedImageAnalysis
     *
     * @param string|null $spoofedImageAnalysis Indicates whether the selfie image is spoofed, copied from the Internet, or is a known deny-listed image
     *
     * @return self
     */
    public function setSpoofedImageAnalysis($spoofedImageAnalysis)
    {
        if (is_null($spoofedImageAnalysis)) {
            throw new \InvalidArgumentException('non-nullable spoofedImageAnalysis cannot be null');
        }
        $allowedValues = $this->getSpoofedImageAnalysisAllowableValues();
        if (!in_array($spoofedImageAnalysis, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'spoofedImageAnalysis', must be one of '%s'",
                    $spoofedImageAnalysis,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spoofedImageAnalysis'] = $spoofedImageAnalysis;

        return $this;
    }

    /**
     * Gets faceLivenessCheck
     *
     * @return string|null
     */
    public function getFaceLivenessCheck()
    {
        return $this->container['faceLivenessCheck'];
    }

    /**
     * Sets faceLivenessCheck
     *
     * @param string|null $faceLivenessCheck Indicates if the selfie image is genuine and not a photo of an image or of a screen
     *
     * @return self
     */
    public function setFaceLivenessCheck($faceLivenessCheck)
    {
        if (is_null($faceLivenessCheck)) {
            throw new \InvalidArgumentException('non-nullable faceLivenessCheck cannot be null');
        }
        $allowedValues = $this->getFaceLivenessCheckAllowableValues();
        if (!in_array($faceLivenessCheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'faceLivenessCheck', must be one of '%s'",
                    $faceLivenessCheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['faceLivenessCheck'] = $faceLivenessCheck;

        return $this;
    }

    /**
     * Gets dataIntegrityCheck
     *
     * @return string|null
     */
    public function getDataIntegrityCheck()
    {
        return $this->container['dataIntegrityCheck'];
    }

    /**
     * Sets dataIntegrityCheck
     *
     * @param string|null $dataIntegrityCheck Indicates whether the data fields contain the correct type of content
     *
     * @return self
     */
    public function setDataIntegrityCheck($dataIntegrityCheck)
    {
        if (is_null($dataIntegrityCheck)) {
            throw new \InvalidArgumentException('non-nullable dataIntegrityCheck cannot be null');
        }
        $allowedValues = $this->getDataIntegrityCheckAllowableValues();
        if (!in_array($dataIntegrityCheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dataIntegrityCheck', must be one of '%s'",
                    $dataIntegrityCheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dataIntegrityCheck'] = $dataIntegrityCheck;

        return $this;
    }

    /**
     * Gets dataConsistencyCheck
     *
     * @return string|null
     */
    public function getDataConsistencyCheck()
    {
        return $this->container['dataConsistencyCheck'];
    }

    /**
     * Sets dataConsistencyCheck
     *
     * @param string|null $dataConsistencyCheck Indicates whether the information on both sides of the document is consistent
     *
     * @return self
     */
    public function setDataConsistencyCheck($dataConsistencyCheck)
    {
        if (is_null($dataConsistencyCheck)) {
            throw new \InvalidArgumentException('non-nullable dataConsistencyCheck cannot be null');
        }
        $allowedValues = $this->getDataConsistencyCheckAllowableValues();
        if (!in_array($dataConsistencyCheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dataConsistencyCheck', must be one of '%s'",
                    $dataConsistencyCheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dataConsistencyCheck'] = $dataConsistencyCheck;

        return $this;
    }

    /**
     * Gets ageValidationCheck
     *
     * @return string|null
     */
    public function getAgeValidationCheck()
    {
        return $this->container['ageValidationCheck'];
    }

    /**
     * Sets ageValidationCheck
     *
     * @param string|null $ageValidationCheck Indicates if the extracted age is greater than or equal to a predefined minimum accepted age
     *
     * @return self
     */
    public function setAgeValidationCheck($ageValidationCheck)
    {
        if (is_null($ageValidationCheck)) {
            throw new \InvalidArgumentException('non-nullable ageValidationCheck cannot be null');
        }
        $allowedValues = $this->getAgeValidationCheckAllowableValues();
        if (!in_array($ageValidationCheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ageValidationCheck', must be one of '%s'",
                    $ageValidationCheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ageValidationCheck'] = $ageValidationCheck;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


